"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[903],{35318:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(27378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=p(n),m=o,f=s["".concat(u,".").concat(m)]||s[m]||d[m]||i;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=s;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},3806:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var r=n(25773),o=(n(27378),n(35318));const i={id:"uth-autofield-algorithm",title:"AutoField algorithm"},a=void 0,l={unversionedId:"uth-autofield-algorithm",id:"uth-autofield-algorithm",title:"AutoField algorithm",description:"Background",source:"@site/../docs/uth-autofield-algorithm.md",sourceDirName:".",slug:"/uth-autofield-algorithm",permalink:"/docs/uth-autofield-algorithm",draft:!1,tags:[],version:"current",frontMatter:{id:"uth-autofield-algorithm",title:"AutoField algorithm"},sidebar:"docs",previous:{title:"Helpers",permalink:"/docs/api-helpers"},next:{title:"Bridge concept",permalink:"/docs/uth-bridge-concept"}},u={},p=[{value:"Background",id:"background",level:2},{value:"Default <code>AutoField</code> implementation",id:"default-autofield-implementation",level:2},{value:"Overriding <code>AutoField</code>",id:"overriding-autofield",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"background"},"Background"),(0,o.kt)("p",null,"Since the beginning, ",(0,o.kt)("inlineCode",{parentName:"p"},"AutoField")," was an ordinary React component. Then, in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/vazco/uniforms/issues/741"},"#","741"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"kind")," parameter of ",(0,o.kt)("inlineCode",{parentName:"p"},"connectField")," was introduced to make certain optimizations possible. To be exact, this parameter made it possible to reduce the overhead of ",(0,o.kt)("inlineCode",{parentName:"p"},"AutoField")," to minimum. The problem is that it increased the complexity of custom themes (or at least keeping them performant)."),(0,o.kt)("p",null,"In ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/vazco/uniforms/issues/800"},"#","800"),", a new way of creating ",(0,o.kt)("inlineCode",{parentName:"p"},"AutoField")," was introduced. Now, instead of a React component, you only specify the component based on its props - the rest is handled in ",(0,o.kt)("inlineCode",{parentName:"p"},"createAutoField"),"."),(0,o.kt)("h2",{id:"default-autofield-implementation"},"Default ",(0,o.kt)("inlineCode",{parentName:"h2"},"AutoField")," implementation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createAutoField } from 'uniforms';\n\nconst AutoField = createAutoField(props => {\n  if (props.component) {\n    return props.component;\n  }\n\n  if (props.options) {\n    return props.checkboxes && props.fieldType !== Array\n      ? RadioField\n      : SelectField;\n  }\n\n  switch (props.fieldType) {\n    case Array:\n      return ListField;\n    case Boolean:\n      return BoolField;\n    case Date:\n      return DateField;\n    case Number:\n      return NumField;\n    case Object:\n      return NestField;\n    case String:\n      return TextField;\n  }\n\n  return invariant(false, 'Unsupported field type: %s', props.fieldType);\n});\n")),(0,o.kt)("h2",{id:"overriding-autofield"},"Overriding ",(0,o.kt)("inlineCode",{parentName:"h2"},"AutoField")),(0,o.kt)("p",null,"If you want to alter the default behavior of ",(0,o.kt)("inlineCode",{parentName:"p"},"AutoField")," and render a different component based on the props, you can do it using the React context available in ",(0,o.kt)("inlineCode",{parentName:"p"},"AutoField.componentDetectorContext"),". You can use it as often as needed - once will be enough in most apps. Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"<AutoField.componentDetectorContext.Provider value={(props, uniforms) => /* ... */}>\n  <Application />\n</AutoField.componentDetectorContext.Provider>\n")),(0,o.kt)("p",null,"If you want to change the detector only partially, i.e., to render one additional field, and in other cases, use the default algorithm as a fallback, return ",(0,o.kt)("inlineCode",{parentName:"p"},"AutoField.defaultComponentDetector"),". Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"<AutoField.componentDetectorContext.Provider\n  value={(props, uniforms) => {\n    if (props.useSpecialField) {\n      return SpecialField;\n    }\n\n    return AutoField.defaultComponentDetector(props, uniforms);\n  }}\n>\n  <Application />\n</AutoField.componentDetectorContext.Provider>\n")))}d.isMDXComponent=!0}}]);